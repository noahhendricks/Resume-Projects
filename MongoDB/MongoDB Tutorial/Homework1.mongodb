// CIS 4339 - 14075 Homework 1, Fall 2021
// Noah Hendricks   ID: 1900219
// VS Code MongoDB

//Excercise Part A
// 1. Create Employees DB
use ('employees')
db.getName()

// 2. Report the output of DB Commands and show all DBs in admin view
db.adminCommand(( { listDatabases: 1 } ));

// Excercise Part B
// 1. Create db named "temporary, add to collection named test, 
// drop the the db, and report output before and after drop."

// create db
use ('temporary')

// otuput name of db
db.getName()

// create collection called "test"
db.createCollection('test')

// Outputs all collection names for db "temporary"
db.getCollectionNames()

//drop db named temporary
db.dropDatabase()

db.getCollectionNames();

// 2. Create multiple collections using distinct department names in the database created in exercise Part A
// create db
use ('employees')
//db.dropDatabase()

// otuput name of db
db.getName() 

//drop db named temporary
//db.dropDatabase()

// https://stackoverflow.com/questions/58983667/how-to-create-multiple-collections-in-mongodb
// For Each loop that adds multiple collection for single db
var collectionList = ["HR", "Coding", "IT", "Safety"];
collectionList.forEach(function(collectionName) {db.createCollection(collectionName)})

//Drop collections
db.HR.drop()
db.Coding.drop()
db.IT.drop()
db.Safety.drop()

// 3. List all the collections in the current database
// Outputs all collection names for db "employees"
db.getCollectionNames();


// Excercise Part C: 
// Insert docs to HR Collection

db.HR.insertOne(
{
    employeeid: 901,
    name: "Alex Resolute",
    salary: 90000 
});
db.HR.insertOne(
{
    employeeid: 29, 
    name: "Noah Heinrich", 
    salary: 100000 
});
db.HR.insertOne(
{
    employeeid: 37, 
    name: "Ken Johnson", 
    salary: 75000 
});

// Insert docs to Coding collection
db.Coding.insertOne(
{
    employeeid: 16,
    name: "Al Hall",
    salary: 92000 
});
db.Coding.insertOne(
{
    employeeid: 23, 
    name: "Brian Conklin", 
    salary: 1000000
});
db.Coding.insertOne(
{
    employeeid: 30, 
    name: "Kathy Jendall", 
    salary: 22000 
});

// Insert docs to IT collection
db.IT.insertOne(
{
    employeeid: 10,
    name: "Jake Rodriguez",
    salary: 40000 
});
db.IT.insertOne(
{
    employeeid: 222, 
    name: "John Johnny", 
    salary: 10000 
});

//Insert docs to Safety Collection
db.Safety.insertOne(
{
    employeeid: 111,
    name: "Holly Billson",
    salary: 88000 
});

// find all collection data in individual find statements
// HR data
db.HR.find()

// Coding Data
db.Coding.find()

// IT Data
db.IT.find()

// Safety Data
db.Safety.find()


// Exercise Part D
//1. Add the follwoing employees to any collection:
db.Safety.insert({
    employeeid: 1187,
    name: "John Steight",
    salary: 75000
})
db.Safety.insert({
    employeeid: 2455,
    name: "Syed",
    salary: 90000
})
db.Safety.insert({
    employeeid: 24113,
    name: "Wright John",
    salary: 65000
});

//2. Find 2 documents using the field name employeeid
// find employeeid: 901 in HR doc
db.HR.find({
    employeeid: 901
})

// find employeeid: 23 in Coding doc 
db.Coding.find({
    employeeid: 23
})

//3. Find 2 documents using the field name name
// find employeeid: 901 in HR doc
db.HR.find({
    name: "Noah Heinrich"
})

// find employeeid: 23 in Coding doc 
db.Safety.find({
    name: "Holly Billson"
})

//4. Find all the documents where the name field starts with John
// Refernce Link: https://www.codegrepper.com/code-examples/python/mongodb+check+if+substring+in+string
db.HR.find({ "name": {"$regex" : ".*John."}})
db.Coding.find({ "name": {"$regex" : ".*John."}})
db.IT.find({ "name": {"$regex" : ".*John."}})
db.Safety.find({ "name": {"$regex" : ".*John."}})

//5. Find all the documents where the name filed contains John
// Reference Link: https://www.tutorialspoint.com/how-to-query-mongodb-with-like
db.HR.find( { "name":/John/ })
db.Coding.find( { "name":/John/ })
db.IT.find( { "name":/John/ })
db.Safety.find( { "name":/John/ })

// Exercise Part E - Working with Real World Data
// create "stocks" collection
db.createCollection("stocks")
db.getCollectionNames();
//mongoimport --db employees --collection stocks --file stocks.json
db.stocks.find()
db.stocks.drop()

//1. Find all stocks with Average Volume less than 100
use('employees');
db.stocks.find({
    "Average Volume": {
        $lt: 100
    }
})

//2. Find stock where Ticker = 'ABFS' using query operator
use('employees');
db.stocks.find({
    "Ticker": "ABFS"
})

//3. Find all stocks with negative growth in 5 years
use('employees');
db.stocks.find({
    "EPS growth past 5 years": {
        $lt: 0
    }
})

//4. Find all stocks with Profit Margin grater than or equal to 0.06
use('employees');
db.stocks.find({
    "Profit Margin": {
        $gte: 0.06
    }
})


// Exercise Part F
//1. Use the $where operator to find all employess who have a salary > 75000
// HR employees
db.HR.find({
    $where: "this.salary > 75000"
})

// Coding employees
db.Coding.find({
    $where: "this.salary > 75000"
})

// IT employees
db.IT.find({
    $where: "this.salary > 75000"
})

// Safety employees
db.Safety.find({
    $where: "this.salary > 75000"
})

//2. Use the $where operator to find employees where the name contains John
// Reference Link: https://stackoverflow.com/questions/69167971/is-there-a-way-for-using-where-operator-to-get-data-that-contains-specified-str
// HR employees
db.HR.find({
    $where: "this.name.includes('John')"
})

// Coding employees
db.Coding.find({
    $where: "this.name.includes('John')"
})

// IT employees
db.IT.find({
    $where: "this.name.includes('John')"
})

// Safety employees
db.Safety.find({
    $where: "this.name.includes('John')"
})


//Exercise Part G - Projection
// 1. Using one collection from the employee database query all the documents in that collection but return only name and salary.

// Safety Collection

//Reference Link to rid _id field = https://www.tutorialspoint.com/how-to-select-a-single-field-in-mongodb
db.Safety.find({},
    {
    name: true/false,
    salary: true/false,
    _id:0
    })





//HW Directory
// cd Desktop\CIS 4339\Homework1\homework1-noahhendricks
